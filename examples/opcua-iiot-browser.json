[
  {
    "id": "baed51be.8047f8",
    "type": "tab",
    "label": "IIoT OPC UA Browser",
    "disabled": false,
    "info": ""
  },
  {
    "id": "ef59a43b.6daa18",
    "type": "OPCUA-IIoT-Browser",
    "z": "baed51be.8047f8",
    "connector": "6bb27954.03ca3",
    "nodeId": "",
    "name": "",
    "showStatusActivities": false,
    "showErrors": false,
    "x": 340,
    "y": 150,
    "wires": [
      [
        "440bd19c.02d958",
        "68a82f0.082145",
        "6b32b938.3c15c8"
      ]
    ]
  },
  {
    "id": "68a82f0.082145",
    "type": "debug",
    "z": "baed51be.8047f8",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 530,
    "y": 150,
    "wires": []
  },
  {
    "id": "ec321f89.75b698",
    "type": "OPCUA-IIoT-Inject",
    "z": "baed51be.8047f8",
    "injectType": "inject",
    "payload": "",
    "payloadType": "date",
    "topic": "ns=0;i=85",
    "repeat": "",
    "crontab": "",
    "once": true,
    "startDelay": "",
    "name": "Root",
    "addressSpaceItems": [],
    "x": 150,
    "y": 150,
    "wires": [
      [
        "ef59a43b.6daa18"
      ]
    ]
  },
  {
    "id": "6b32b938.3c15c8",
    "type": "OPCUA-IIoT-Response",
    "z": "baed51be.8047f8",
    "name": "",
    "showStatusActivities": false,
    "showErrors": false,
    "x": 540,
    "y": 90,
    "wires": [
      [
        "92cbaef5.395088"
      ]
    ]
  },
  {
    "id": "92cbaef5.395088",
    "type": "debug",
    "z": "baed51be.8047f8",
    "name": "",
    "active": false,
    "console": "false",
    "complete": "false",
    "x": 710,
    "y": 90,
    "wires": []
  },
  {
    "id": "440bd19c.02d958",
    "type": "ui_template",
    "z": "baed51be.8047f8",
    "group": "b361a5b.9df1b58",
    "name": "",
    "order": 0,
    "width": 0,
    "height": 0,
    "format": "<div layout=\"column\" layout-align=\"space-between\">\n    <div layout=\"row\" layout-align=\"space-around center\">\n        <p>{{msg.payload.endpoint}}</p>\n    </div>\n    <div layout=\"row\" layout-align=\"space-around center\">\n        <p>{{msg.payload.browseTopic}} with {{msg.payload.browserResultCount}} references</p>\n    </div>\n    <div layout=\"row\" layout-align=\"space-between center\">\n        <h1>Results</h1>\n    </div>\n    <div layout=\"row\" layout-align=\"space-between center\">\n        <select ng-model=\"item\" ng-options=\"item.displayName.text for item in msg.payload.browserItems\">\n            <option value=\"\">-- Root --</option>\n        </select>\n        <button ng-click=\"send({payload: {actiontype: 'browse', root: item}})\">Browse</button>\n    </div>\n    <div layout=\"row\" layout-align=\"space-around center\">\n        <div>\n            <ul>\n                <li ng-repeat=\"item in msg.payload.browserItems\">\n                  {{item.displayName.text}} ( {{item.nodeId}} - {{item.browseName}})\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>",
    "storeOutMessages": false,
    "fwdInMessages": false,
    "templateScope": "local",
    "x": 340,
    "y": 90,
    "wires": [
      [
        "ef59a43b.6daa18"
      ]
    ]
  },
  {
    "id": "b36fe060.4a33e8",
    "type": "OPCUA-IIoT-Flex-Server",
    "z": "baed51be.8047f8",
    "port": "55390",
    "endpoint": "",
    "acceptExternalCommands": true,
    "maxAllowedSessionNumber": "",
    "maxConnectionsPerEndpoint": "",
    "maxAllowedSubscriptionNumber": "",
    "alternateHostname": "",
    "name": "",
    "showStatusActivities": false,
    "showErrors": false,
    "allowAnonymous": true,
    "isAuditing": false,
    "users": [],
    "addressSpaceScript": "function constructAlarmAddressSpace(server, addressSpace, eventObjects) {\n    // server = the created node-opcua server\n    // addressSpace = script placeholder\n    // eventObjects = to hold event variables in memory from this script\n    \n    // internal global sandbox objects are \n    // node = node of the flex server, \n    // coreServer = core iiot server object for debug and access to nodeOPCUA,\n    // and scriptObjects to hold variables and functions\n    \n    // globals are to find on node.context().global and should be initialized here\n    node.context().global.set(\"TestOPCUAVarValue\", {})\n    \n    coreServer.internalDebugLog('init dynamic address space')\n    node.warn('construct new address space for OPC UA')\n    \n    // from here - see the node-opcua docs how to build address sapces\n    let tanks = addressSpace.addObject({\n        browseName: 'Tanks',\n        description: 'The Object representing some tanks',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    let oilTankLevel = addressSpace.addVariable({\n        browseName: 'OilTankLevel',\n        displayName: 'Oil Tank Level',\n        description: 'Fill level in percentage (0% to 100%) of the oil tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    // ---------------------------------------------------------------------------------\n    // Let's create a exclusive Limit Alarm that automatically raise itself\n    // when the tank level is out of limit\n    // ---------------------------------------------------------------------------------\n    let exclusiveLimitAlarmType = addressSpace.findEventType('ExclusiveLimitAlarmType')\n    node.assert(exclusiveLimitAlarmType !== null)\n    \n    let oilTankLevelCondition = addressSpace.instantiateExclusiveLimitAlarm(exclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: oilTankLevel,\n        browseName: 'OilTankLevelCondition',\n        displayName: 'Oil Tank Level Condition',\n        description: 'ExclusiveLimitAlarmType Condition',\n        conditionName: 'OilLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: oilTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    // --------------------------------------------------------------\n    // Let's create a second letiable with no Exclusive alarm\n    // --------------------------------------------------------------\n    let gasTankLevel = addressSpace.addVariable({\n        browseName: 'GasTankLevel',\n        displayName: 'Gas Tank Level',\n        description: 'Fill level in percentage (0% to 100%) of the gas tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    let nonExclusiveLimitAlarmType = addressSpace.findEventType('NonExclusiveLimitAlarmType')\n    node.assert(nonExclusiveLimitAlarmType !== null)\n    \n    let gasTankLevelCondition = addressSpace.instantiateNonExclusiveLimitAlarm(nonExclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: gasTankLevel,\n        browseName: 'GasTankLevelCondition',\n        displayName: 'Gas Tank Level Condition',\n        description: 'NonExclusiveLimitAlarmType Condition',\n        conditionName: 'GasLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: gasTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    // variable with value\n    if(scriptObjects.testReadWrite === undefined || scriptObjects.testReadWrite === null) {\n            scriptObjects.testReadWrite = 1000.0\n    }\n    \n    let myVariables = addressSpace.addObject({\n        browseName: 'MyVariables',\n        description: 'The Object representing some variables',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    if(coreServer.core) {\n        addressSpace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=4;s=TestReadWrite',\n            browseName: 'TestReadWrite',\n            displayName: 'Test Read and Write',\n            dataType: 'Double',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                        value: scriptObjects.testReadWrite\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.testReadWrite = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n        let memoryVariable = addressSpace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=4;s=free_memory',\n            browseName: 'FreeMemory',\n            displayName: 'Free Memory',\n            dataType: coreServer.core.nodeOPCUA.DataType.Double,\n            \n            value: {\n              get: function () {\n                return new coreServer.core.nodeOPCUA.Variant({\n                  dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                  value: coreServer.core.availableMemory()\n                })\n              }\n            }\n        })\n        addressSpace.installHistoricalDataNode(memoryVariable)\n        \n        let globalValue = node.context().global.get(\"TestOPCUAVarValue\")\n        if(globalValue) {\n            coreServer.internalDebugLog('init TestOPCUAVarValue in address space')\n            let testOPCUAVarValue = addressSpace.addVariable({\n                componentOf: myVariables,\n                nodeId: 'ns=4;s=TestOPCUAVarValue',\n                browseName: 'TestOPCUAVarValue',\n                displayName: 'Test OPC UA Variable Value',\n                dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                \n                value: {\n                  get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                      dataType: coreServer.core.nodeOPCUA.DataType.Double,\n                      value: node.context().global.get(\"TestOPCUAVarValue\").value\n                    })\n                  },\n                  set: function (variant) {\n                      scriptObjects.testReadWrite = parseFloat(variant.value)\n                      return coreServer.core.nodeOPCUA.StatusCodes.Good\n                  }\n                }\n            })\n            addressSpace.installHistoricalDataNode(memoryVariable)\n        }\n    \n    } else {\n        coreServer.internalDebugLog('coreServer.core needed for coreServer.core.nodeOPCUA')\n    }\n\n    // hold event objects in memory \n    eventObjects.oilTankLevel = oilTankLevel\n    eventObjects.oilTankLevelCondition = oilTankLevelCondition\n    \n    eventObjects.gasTankLevel = gasTankLevel\n    eventObjects.gasTankLevelCondition = gasTankLevelCondition\n}",
    "x": 350,
    "y": 40,
    "wires": [
      []
    ]
  },
  {
    "id": "6bb27954.03ca3",
    "type": "OPCUA-IIoT-Connector",
    "z": "",
    "endpoint": "opc.tcp://localhost:55390/",
    "keepSessionAlive": true,
    "loginEnabled": false,
    "securityPolicy": "None",
    "securityMode": "NONE",
    "name": "LOCAL SERVER 55390",
    "showStatusActivities": false,
    "showErrors": false
  },
  {
    "id": "b361a5b.9df1b58",
    "type": "ui_group",
    "z": "",
    "name": "Default",
    "tab": "8113e46.2340318",
    "disp": true,
    "width": "10"
  },
  {
    "id": "8113e46.2340318",
    "type": "ui_tab",
    "z": "",
    "name": "Home",
    "icon": "dashboard"
  }
]
